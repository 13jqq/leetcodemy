class Solution {
     int countIsland  = 0 ;
        int n = 0 ; 
        int  m  =  0;
        
        boolean[][] flagGrid ;
        public int maxAreaOfIsland(int[][] grid) {
        	n = grid.length;
        	m = grid[0].length;
        	
        	int max = 0 ;
        	
        	if( grid == null){
        		return max;
        	}
        	flagGrid = new boolean[n][m];
        	
        	for( int i = 0 ; i< n ; i ++){
        		for( int j  =0  ; j < m ; j++){
        			flagGrid[i][j] = false;
        		}
        	}
        	
        	for(int i = 0 ;i < n ;i ++){
        		for( int j = 0; j < m ; j++){
        			if( grid[i][j] == 1 && flagGrid[i][j] == false){
        				countIsland = 0;
        				max = Integer.max(max, getIsland(grid , i , j));
        			}
        		}
        	}
        	
        	return max;
            
        }
        
        public int getIsland(int[][] grid , int i , int j ){
        	
        	flagGrid[i][j] = true;
        	
        	countIsland ++;
        	int[] offX = {0 , 0 , -1 , 1};
        	int[] offY = {1 , -1 , 0 , 0 };
        	
        	for( int t= 0; t < 4 ; t++){
        		int ox = offX[t] +i;
        		int oy = offY[t] + j;
        		
        		if(ox < 0 || ox >= n || oy <0 || oy >= m){
        			continue;
        		}
        		
        		if( grid[ox][oy] == 1 && flagGrid[ox][oy] == false ){
        			
        			getIsland(grid , ox , oy );
        		}
        	}
        	
        	
        	return countIsland ;
        }
    
}
